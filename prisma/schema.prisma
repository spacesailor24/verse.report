// TODO Add ship manufacturer

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransmissionType {
  OFFICIAL
  LEAK
  PREDICTION
  COMMENTARY
}

enum TransmissionStatus {
  DRAFT
  PUBLISHED
}

enum CategoryType {
  SHIP
  PATCH
  CREATURE
  LOCATION
  EVENT
  FEATURE
  NEWSLETTER
}

// Source model for reusable source references
model Source {
  id          Int     @id @default(autoincrement())
  name        String  @unique // Display name (e.g., "Spectrum", "CitizenCon")
  slug        String  @unique // URL-friendly version (e.g., "spectrum", "citizencon")
  description String? @db.Text

  // Display order for UI
  sortOrder Int @default(0)

  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transmissions Transmission[]

  @@index([slug])
  @@index([sortOrder])
}

// Main transmission model
model Transmission {
  id          String             @id @default(cuid())
  title       String
  subTitle    String             @db.Text
  content     String?            @db.Text
  type        TransmissionType
  status      TransmissionStatus @default(DRAFT)
  isHighlight Boolean            @default(false)

  // Metadata
  sourceUrl   String?
  sourceId    Int
  source      Source    @relation(fields: [sourceId], references: [id], onDelete: Restrict)
  publishedAt DateTime?

  // Publisher (user who created the transmission)
  publisherId String
  publisher   User   @relation(fields: [publisherId], references: [id], onDelete: Cascade)

  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations - using pivot table
  transmissionTags TransmissionTag[]

  // Indexes for faster queries
  @@index([type])
  @@index([status])
  @@index([sourceId])
  @@index([publishedAt])
  @@index([publisherId])
}

// Category model for organizing tags
model Category {
  id          Int          @id @default(autoincrement())
  name        String       @unique // Display name (e.g., "Ships", "Patches")
  slug        String       @unique // URL-friendly version (e.g., "ships", "patches")
  type        CategoryType
  description String?      @db.Text

  // Display order for UI
  sortOrder Int @default(0)

  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tags Tag[]

  @@index([type])
  @@index([slug])
  @@index([sortOrder])
}

// Ship family model for grouping ship variants
model ShipFamily {
  id   Int    @id @default(autoincrement())
  name String @unique // Display name (e.g., "Ironclad", "Apollo")
  slug String @unique // URL-friendly version (e.g., "ironclad", "apollo")

  // Display order for UI
  sortOrder Int @default(0)

  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  variants Tag[] // All ship variant tags in this family

  @@index([slug])
  @@index([sortOrder])
}

// Tag model - flexible categorization system
model Tag {
  id          Int     @id @default(autoincrement())
  name        String  @unique // Display name (e.g., "Ironclad", "3.24")
  slug        String  @unique // URL-friendly version (e.g., "ironclad", "3-24")
  description String? @db.Text

  // Category relationship
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Ship family relationship (optional - only for ship tags)
  shipFamilyId Int?
  shipFamily   ShipFamily? @relation(fields: [shipFamilyId], references: [id], onDelete: SetNull)

  // Display order for UI
  sortOrder Int @default(0)

  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations - using pivot table
  transmissionTags TransmissionTag[]

  @@index([slug])
  @@index([categoryId])
  @@index([shipFamilyId])
  @@index([sortOrder])
}

// PIVOT TABLE - connects transmissions and tags
model TransmissionTag {
  transmissionId String
  tagId          Int

  // Optional metadata about this specific tag assignment
  addedAt    DateTime @default(now())
  addedBy    String? // User ID who added this tag
  confidence Int      @default(100) // 0-100, useful for AI-generated tags

  // Relations
  transmission Transmission @relation(fields: [transmissionId], references: [id], onDelete: Cascade)
  tag          Tag          @relation(fields: [tagId], references: [id], onDelete: Cascade)

  // Composite primary key - each transmission-tag combo must be unique
  @@id([transmissionId, tagId])
  // Indexes for fast lookups
  @@index([transmissionId])
  @@index([tagId])
  @@index([addedAt])
}

// ========== AUTH.JS MODELS ==========

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  userRoles     UserRole[]
  transmissions Transmission[] // Transmissions published by this user

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
